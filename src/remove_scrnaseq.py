"""
This script uses the recount metadata and a sparsity threshold to remove
sc-RNAseq data from the recount compendium
"""

import argparse

import pandas as pd
import tqdm

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('count_file', help='The file containing the count matrix generated by '
                                           'download_recount3.R')
    parser.add_argument('metadata_file', help='The file with info about samples')
    parser.add_argument('out_file', help='The file to save the normalized results to')
    args = parser.parse_args()

    metadata = pd.read_csv(args.metadata_file, sep='\t')
    # Drop rows without sample ids and duplicate rows
    metadata = metadata[metadata['external_id'].notna()]
    metadata = metadata.drop_duplicates(subset=['external_id', 'study'])
    # Set the index to the sample id for faster access
    metadata = metadata.set_index('external_id')

    LINES_IN_FILE = 317259

    with open(args.count_file, 'r') as count_file:
        out_file = open(args.out_file, 'w')

        header = count_file.readline()
        out_file.write(header)
        header = header.replace('"', '')
        header_genes = header.strip().split('\t')
        header_genes = [gene.split('.')[0] for gene in header_genes]

        samples_seen = set()

        total_genes = len(header_genes)

        for i, line in tqdm.tqdm(enumerate(count_file), total=LINES_IN_FILE):
            parsed_line = line.replace('"', '')
            parsed_line = parsed_line.strip().split('\t')
            sample = parsed_line[0]

            if sample in samples_seen:
                continue
            samples_seen.add(sample)

            counts = parsed_line[1:]
            try:
                counts = [float(count) for count in counts]
            except ValueError:
                continue

            # This works for int zeros and float zeros
            zero_count = counts.count(0)
            sparsity = zero_count / total_genes
            try:
                sample_metadata = metadata.loc[sample, :]
            except KeyError:
                # print(e)
                continue

            recount_pred = sample_metadata['recount_pred.pattern.predict.type']

            try:
                if len(recount_pred) == 0:
                    recount_pred = None
            # Skip malformed lines
            except TypeError:
                continue

            try:
                if sparsity > .75 or recount_pred == 'scrna-seq':
                    continue
                else:
                    out_file.write(line)
            except ValueError as e:
                print(recount_pred)
                raise(e)
